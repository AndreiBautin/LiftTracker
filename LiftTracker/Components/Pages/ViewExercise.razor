@page "/Exercise/{exerciseId}"
@using LiftTracker.Data
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.EntityFrameworkCore
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject NavigationManager NavigationManager;
@inject IConfiguration Configuration;
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize];
@inject AuthenticationStateProvider AuthenticationStateProvider;

<div class="row">
	<div class="col-3">
	</div>
	<div class="col-6">
		<button class="btn-outline-light btn rounded-pill my-3" @onclick="BackToExercises">Back To Exercises</button>
	</div>
	<div class="col-3">
	</div>
</div>
<div class="row">
	@if (Exercise != null)
	{
		<div class="row">
			<div class="col-1"></div>
			<div class="col-10 my-3">
				<div class="col-12 card p-3">
					<div class="row text-center mb-3">
						<h1>
							@(Exercise.Name)
						</h1>
							<hr />
							@foreach (var session in SessionExercises)
							{
								foreach (var set in session.Sets)
								{
									<div class="mb-3">	
										@($"{set?.Load?.ToString(set.Load.Value % 1 == 0 ? "0" : "0.0")} x {set?.Reps} reps @ {set?.Rpe} RPE")
									</div>
								}
								<hr />
							}
					</div>
				</div>
			</div>
			<div class="col-1"></div>
		</div>
	}
</div>

@code {
	[Parameter]
	public string ExerciseId { get; set; }
	public Exercise? Exercise { get; set; }
	public IEnumerable<SessionExercise>? SessionExercises { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		var userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

		using var context = new LiftTrackerContextBuilder(Configuration).Build();
		Exercise = context.Exercises.SingleOrDefault(x => x.Id.ToString() == ExerciseId);
		SessionExercises = context
			.SessionExercises
			.Include(x => x.Sets)
			.Include(x => x.Session)
			.ThenInclude(x => x.MicroCycle)
			.ThenInclude(x => x.MesoCycle)
			.ThenInclude(x => x.TrainingBlock)
			.ThenInclude(x => x.MacroCycle)
			.Where(x => x.ExerciseId == Exercise.Id && x.Sets != null && x.Sets.All(x => x.IsComplete) && x.Session.MicroCycle.MesoCycle.TrainingBlock.MacroCycle.ApplicationUserId == userId)
			.ToList();
	}

	private void BackToExercises()
	{
		NavigationManager.NavigateTo("/Exercises");
	}
}