@page "/MuscleGroups"
@using LiftTracker.Data
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.EntityFrameworkCore
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject NavigationManager NavigationManager;
@inject IConfiguration Configuration;
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize];

<div class="row">
	@if (Rows != null)
	{
		@foreach (var row in Rows)
		{
			<div class="row">
				<div class="col-1"></div>
				<div class="col-10 my-3">
					<div class="col-12 card p-3">
						<div class="row text-center mb-3">
							<h1>
								@(row.Name)
							</h1>
						</div>
						<div class="row my-2">
							<div class="col-2">
							</div>
							<div class="col-4">
								<h3>MV</h3>
							</div>
							<div class="col-4">
								<input @bind="row.MV" type="number" class="form-control bg-dark text-white" placeholder="MV" aria-label="MV" aria-describedby="basic-addon1">
							</div>
							<div class="col-2">
							</div>
						</div>
						<div class="row my-2">
							<div class="col-2">
							</div>
							<div class="col-4">
								<h3>MEV</h3>
							</div>
							<div class="col-4">
								<input @bind="row.MEV" type="number" class="form-control bg-dark text-white" placeholder="MEV" aria-label="MEV" aria-describedby="basic-addon1">
							</div>
							<div class="col-2">
							</div>
						</div>
						<div class="row my-2">
							<div class="col-2">
							</div>
							<div class="col-4">
								<h3>MRV</h3>
							</div>
							<div class="col-4">
								<input @bind="row.MRV" type="number" class="form-control bg-dark text-white" placeholder="MRV" aria-label="MRV" aria-describedby="basic-addon1">
							</div>
							<div class="col-2">
							</div>
						</div>
					</div>
				</div>
				<div class="col-1"></div>
			</div>
		}
		<button class="btn-outline-light btn rounded-pill my-3" @onclick="Update">Update</button>
	}
</div>

@code {
	public IEnumerable<MuscleGroup>? Rows { get; set; }

	protected override void OnInitialized()
	{
		using var context = new LiftTrackerContextBuilder(Configuration).Build();
		Rows = context.MuscleGroups.ToList();
	}

	private void Update()
	{
		using var context = new LiftTrackerContextBuilder(Configuration).Build();

		foreach (var row in Rows)
		{
			var record = context.MuscleGroups.SingleOrDefault(x => x.MuscleGroupEnum == row.MuscleGroupEnum);
			if (record != null)
			{
				record.MV = row.MV;
				record.MEV = row.MEV;
				record.MRV = row.MRV;
				context.SaveChanges();
			}
		}

		NavigationManager.NavigateTo("/musclegroups", true);
	}
}