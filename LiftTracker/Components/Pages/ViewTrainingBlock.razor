@page "/trainingblock"
@using LiftTracker.Data
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.EntityFrameworkCore
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject NavigationManager NavigationManager;
@inject IConfiguration Configuration;
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize];

<div class="row">
	@if (TrainingBlock.MesoCycles != null)
	{
		@foreach (var mesoCycle in TrainingBlock.MesoCycles)
		{
		<div class="col-12">
				<div class="col-12 @(TrainingBlock.TrainingPhase == TrainingPhase.Hypertrophy ? "card" : TrainingBlock.TrainingPhase == TrainingPhase.Strength ? "card2" : "card3") p-3 m-3">
					<div class="row text-center mb-3">
						<h1>
							@TrainingBlock.TrainingPhase
						</h1>
					</div>
					@if (mesoCycle.MicroCycles != null) {
						@foreach (var microCycle in mesoCycle.MicroCycles.Select((value, i) => new { i, value }))
						{
							<div class="row">
								@if (microCycle.value.Sessions != null) {
									@foreach (var session in microCycle.value.Sessions)
									{
										<div class="col-12 col-lg-2">
											<div class="@(!session.IsComplete ? "card" : "card3") schedule-table text-center col-12 session-card my-3" @onclick="(() => OnSessionClick(session.Id))">
												<h2>@session.DayOfTheWeek</h2>
												<table>
													@if (session.SessionExercises != null)
													{
														@foreach (var sessionExercise in session.SessionExercises)
														{
															<tr>
																<td>
																	@($"{new LiftTrackerContextBuilder(Configuration).Build().Exercises?.FirstOrDefault(x => sessionExercise != null && x.Id == sessionExercise.ExerciseId)?.Name}")
																	@if (session.IsComplete && sessionExercise?.Sets != null) {
																		foreach (var set in sessionExercise.Sets)
																		{
																			<div>
																				@($"{set?.Load?.ToString(set.Load.Value % 1 == 0 ? "0" : "0.0")} x {set?.Reps} reps @ {set?.Rpe} RPE")
																			</div>
																		}
																	}
																	else
																	{
																		<div class="statnum">
																			@($"{sessionExercise?.Sets?.FirstOrDefault()?.TargetRpe}-{sessionExercise?.Sets?.FirstOrDefault()?.TargetRpe + 1} RPE")
																		</div>
																		@($"{sessionExercise?.Sets?.Count()} sets {new LiftTrackerContextBuilder(Configuration)?.Build()?.RepRanges?.FirstOrDefault(x => sessionExercise != null && x.Id == sessionExercise.RepRangeId)?.Low} - {new LiftTrackerContextBuilder(Configuration)?.Build()?.RepRanges?.FirstOrDefault(x => sessionExercise != null && x.Id == sessionExercise.RepRangeId)?.High} reps")
																	}
																</td>
															</tr>
														}
													}
												</table>
											</div>
										</div>
									}
								}
							</div>
							<div class="row text-center my-3">
								<h2>
									@($"Week {microCycle.i+1}")
								</h2>
							</div>
						}
							
					}
			</div>
		</div>
		}
	}
	
</div>

@code {

	private TrainingBlock? TrainingBlock;

	protected override void OnInitialized()
	{
		using var context = new LiftTrackerContextBuilder(Configuration).Build();

		TrainingBlock = context.TrainingBlocks?
			.Include(x => x.MesoCycles)
			.ThenInclude(x => x.MicroCycles)
			.ThenInclude(x => x.Sessions)
			.ThenInclude(x => x.SessionExercises)
			.ThenInclude(x => x.Sets)
			.FirstOrDefault();
	}

	public void StartWorkout()
	{
		NavigationManager.NavigateTo("/TrackWorkout");
	}

	public void OnSessionClick(int sessionId)
	{
		NavigationManager.NavigateTo($"/TrackWorkout/{sessionId}");
	}
}