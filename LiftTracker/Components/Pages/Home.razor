@page "/"
@using LiftTracker.Data
@using LiftTracker.UseCases
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.EntityFrameworkCore
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject NavigationManager NavigationManager;
@inject IConfiguration Configuration;
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize];
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IGenerateMacroCycleUseCase GenerateMacroCycleUseCase;

<div class="row">
	<div class="col-12 col-lg-2">
		@if (LastSession != null)
		{
			<button class="btn-outline-light btn rounded-pill my-3" @onclick="ReviewSession">Review Last Session</button>
			<div class="col-12">
				<div class="card3 schedule-table text-center col-12 session-card my-3" @onclick="(() => ReviewSession())">
					<h2>@LastSession.DayOfTheWeek</h2>
					<table>
						@if (LastSession.SessionExercises != null) {
							@foreach (var sessionExercise in LastSession.SessionExercises)
							{
								<tr>
									<td>
										@($"{new LiftTrackerContextBuilder(Configuration).Build().Exercises.FirstOrDefault(x => sessionExercise != null && x.Id == sessionExercise.ExerciseId)?.Name}")
										@if (sessionExercise?.Sets != null)
										{
											@foreach (var set in sessionExercise.Sets)
											{
											<div>
												@if (set.IsSkipped)
												{
													@("Skipped")
												}
												else
												{
													@($"{set?.Load?.ToString(set.Load.Value % 1 == 0 ? "0" : "0.0")} x {set?.Reps} reps @ {set?.Rpe} RPE")
												}
											</div>
											}
										}
									</td>
								</tr>
							}
						}
					</table>
				</div>
			</div>
		}
	</div>
	<div class="col-12 col-lg-2">
		@if (NextSession != null) {
			<button class="btn-outline-light btn rounded-pill my-3" @onclick="BeginSession">Begin Next Session</button>
			<div class="col-12">
				<div class="card schedule-table text-center col-12 session-card my-3" @onclick="(() => BeginSession())">
					<h2>@NextSession.DayOfTheWeek</h2>
					<table>
						@if (NextSession?.SessionExercises != null) { 
							@foreach (var sessionExercise in NextSession.SessionExercises)
							{
								<tr>
									<td>
										@($"{new LiftTrackerContextBuilder(Configuration).Build().Exercises.FirstOrDefault(x => sessionExercise != null && x.Id == sessionExercise.ExerciseId)?.Name}")
										<div class="statnum">
											@($"{sessionExercise?.Sets?.FirstOrDefault()?.TargetRpe}-{sessionExercise?.Sets?.FirstOrDefault()?.TargetRpe+1} RPE")
										</div>
										@($"{sessionExercise?.Sets?.Count()} sets {new LiftTrackerContextBuilder(Configuration)?.Build()?.RepRanges?.FirstOrDefault(x => sessionExercise != null && x.Id == sessionExercise.RepRangeId)?.Low} - {new LiftTrackerContextBuilder(Configuration)?.Build()?.RepRanges?.FirstOrDefault(x => sessionExercise != null && x.Id == sessionExercise.RepRangeId)?.High} reps")
									</td>
								</tr>
							}
						}
					</table>
				</div>
			</div>
		}
	</div>
	
	<div class="col-12 col-lg-2">
		@if (NextSession == null && LastSession == null)
		{
			@if (IsGenerating)
			{
				<h1 class="blink_me">Generating</h1>
			}
			else
			{
				<div class="row">
					<label for="split">Split</label>
					<select name="split" class="form-select d-inline-block col-6 my-2" @bind="TrainingSplit">
						@foreach (var trainingSplit in ((IEnumerable<TrainingSplit>)Enum.GetValues(typeof(TrainingSplit))))
						{
							<option value="@trainingSplit">@trainingSplit.ToString()</option>
						}
					</select>
				</div>
				<button class="btn-outline-light btn rounded-pill my-3" @onclick="() => Generate(4, 1)">Generate Recomp Program</button>
				<button class="btn-outline-light btn rounded-pill my-3" @onclick="() => Generate(4, 3)">Generate Cutting Program</button>
				<button class="btn-outline-light btn rounded-pill my-3" @onclick="() => Generate(4, 4)">Generate Bulking Program</button>
			}
		}
	</div>
</div>

@code {
	private Session? LastSession;
	private Session? NextSession;
	private IEnumerable<MuscleGroupVolumeModifiers>? MuscleGroupVolumeModifiers { get; set; }
	private MicroCycle? CurrentMicroCycle { get; set; }
	private int? Week { get; set; }
	private bool IsGenerating { get; set; }
	private TrainingSplit TrainingSplit { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		var userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

		using var context = new LiftTrackerContextBuilder(Configuration).Build();

		MuscleGroupVolumeModifiers = ((IEnumerable<MuscleGroupEnum>)Enum.GetValues(typeof(MuscleGroupEnum))).Select(x => new MuscleGroupVolumeModifiers() { 
			MuscleGroup = x
		}).ToList();

		var userSessions = context
			.Sessions?
			.Include(x => x.MicroCycle)
			.ThenInclude(x => x.MesoCycle)
			.ThenInclude(x => x.TrainingBlock)
			.ThenInclude(x => x.MacroCycle)
			.Include(x => x.SessionExercises)
			.ThenInclude(x => x.Sets)
			.Where(x => x.MicroCycle.MesoCycle.TrainingBlock.MacroCycle.ApplicationUserId == userId)
			.OrderBy(x => x.Id)
			.ToList();

		LastSession = userSessions
			.LastOrDefault(x => x.IsComplete);

		NextSession = userSessions
			.FirstOrDefault(x => !x.IsComplete);
	}

	public void BeginSession()
	{
		NavigationManager.NavigateTo($"/TrackWorkout/{NextSession?.Id}");
	}

	public void ReviewSession()
	{
		NavigationManager.NavigateTo($"/TrackWorkout/{LastSession?.Id}");
	}

	public void OnSessionClick(int sessionId)
	{
		NavigationManager.NavigateTo($"/TrackWorkout/{sessionId}");
	}

	private void Clear()
	{
		using var context = new LiftTrackerContextBuilder(Configuration).Build();
		if (context.Sets.Count() > 0)
		{
			context.Sets.ExecuteDelete();
			context.SessionExercises.ExecuteDelete();
			context.Sessions.ExecuteDelete();
			context.MicroCycles.ExecuteDelete();
			context.MesoCycles.ExecuteDelete();
			context.TrainingBlocks.ExecuteDelete();
			context.MacroCycles.ExecuteDelete();
			context.SaveChanges();
		}
		NavigationManager.NavigateTo("/", true);
	}

	private async Task Generate(int? NewMesoLength, int? NewHypertrophyMesoCount)
	{
		try
		{
			var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
			var user = authState.User;
			var userId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

			IsGenerating = true;
			StateHasChanged();
			using var context = new LiftTrackerContextBuilder(Configuration).Build();
			var options = new MacroCycleOptions()
				{
					TrainingBlockOptions = new List<TrainingBlockOptions>()
			{
				new TrainingBlockOptions()
				{
					MesoLength = NewMesoLength ?? 4,
					MesoCount = NewHypertrophyMesoCount ?? 3,
					TrainingPhase = TrainingPhase.Hypertrophy,
					TrainingSplit = TrainingSplit
				},
				new TrainingBlockOptions()
				{
					MesoLength = NewMesoLength ?? 4,
					MesoCount = 1,
					TrainingPhase = TrainingPhase.Strength,
					TrainingSplit = TrainingSplit
				},
				new TrainingBlockOptions()
				{
					MesoLength = NewMesoLength ?? 4,
					MesoCount = 1,
					TrainingPhase = TrainingPhase.Peaking,
					TrainingSplit = TrainingSplit
				},
			}
				};
			var macroCycle = GenerateMacroCycleUseCase.Generate(options);
			macroCycle.ApplicationUserId = userId;
			context.MacroCycles.Add(macroCycle);
			context.SaveChanges();
			NavigationManager.NavigateTo("/", true);
		}
		catch (Exception ex)
		{
			Console.WriteLine($"An error occurred: {ex.Message}");
		}
	}

}