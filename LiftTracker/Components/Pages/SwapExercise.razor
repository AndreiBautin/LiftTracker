@page "/SwapExercise/{SessionExerciseId}"
@using LiftTracker.Data
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.EntityFrameworkCore
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject NavigationManager NavigationManager;
@inject IConfiguration Configuration;
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize];

<div class="row">
	<div class="col-3">
	</div>
	<div class="col-6">
		<button class="btn-outline-light btn rounded-pill my-3" @onclick="BackToSession">Back To Session</button>
	</div>
	<div class="col-3">
	</div>
</div>
<div class="row">
	@if (SessionExercise != null)
	{
		<div class="col-1">
		</div>
		<div class="card schedule-table text-center col-10">
			<h1 class="mt-3">Swap Exercise: </h1> 
			<h2>@OldExercise.Name</h2>
			<select class="form-select d-inline-block my-3" @bind="NewExerciseId">
				<option disabled value="0">New Exercise</option>
				@foreach (var exercise in Exercises)
				{
					<option value="@exercise.Id">@exercise.Name</option>
				}
			</select>
			<div class="text-center">
				<a href="/CreateExercise/">Create New</a>
			</div>
			<button class="btn-outline-light btn rounded-pill my-3" @onclick="(() => Swap(false))">Update Just This Session</button>
			<button class="btn-outline-light btn rounded-pill my-3" @onclick="(() => Swap(true))">Update Rest Of MesoCycle</button>
		</div>
		<div class="col-1">
		</div>
	}
</div>

@code {
	[Parameter]
	public string? SessionExerciseId { get; set; }
	public SessionExercise? SessionExercise { get; set; }
	public Exercise? OldExercise { get; set; }
	public IEnumerable<Exercise>? Exercises {get; set;}
	public int NewExerciseId { get; set; }

	protected override void OnInitialized()
	{
		using var context = new LiftTrackerContextBuilder(Configuration).Build();
		SessionExercise = context.SessionExercises.SingleOrDefault(x => x.Id.ToString() == SessionExerciseId);
		if (SessionExercise != null)
		{
			OldExercise = context.Exercises.SingleOrDefault(x => x.Id == SessionExercise.ExerciseId);
			Exercises = context.Exercises.Where(x => x.MuscleGroup == OldExercise.MuscleGroup && x.Id != OldExercise.Id).ToList();
		}
	}

	private void BackToSession()
	{
		if (SessionExercise != null)
		{
			NavigationManager.NavigateTo($"/TrackWorkout/{SessionExercise.SessionId}");
		}
	}

	private void Swap(bool updateRestOfMeso)
	{
		using var context = new LiftTrackerContextBuilder(Configuration).Build();
		if (updateRestOfMeso)
		{
			var sessionExercises = context.SessionExercises.Where(x => x.ExerciseId == OldExercise.Id).ToList();
			foreach (var sessionExercise in sessionExercises)
			{
				sessionExercise.ExerciseId = NewExerciseId;
			}
			context.SaveChanges();
		}
		else
		{
			var sessionExercise = context.SessionExercises.SingleOrDefault(x => x.Id.ToString() == SessionExerciseId);
			sessionExercise.ExerciseId = NewExerciseId;
			context.SaveChanges();
		}
		NavigationManager.NavigateTo($"/TrackWorkout/{SessionExercise.SessionId}");
	}
}