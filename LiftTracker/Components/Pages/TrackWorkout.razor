@page "/TrackWorkout/{SessionId}"
@page "/TrackWorkout"
@using LiftTracker.Data
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.EntityFrameworkCore
@attribute [StreamRendering]
@rendermode InteractiveServer
@inject NavigationManager NavigationManager;
@inject IConfiguration Configuration;
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize];

<div class="row">
    @if (Session != null)
    {
        <div class="col-12">
            <div class="card p-3">
                <div class="row text-center mb-3">
                    <h1>@(Session.SessionExercises != null && Session.SessionExercises.Any() ? new LiftTrackerContextBuilder(Configuration).Build().Exercises.FirstOrDefault(x => x.Id == Session.SessionExercises.ToArray()[_currentExerciseIndex].ExerciseId)?.Name : "No Exercise")</h1>
                </div>
                @if (Session.SessionExercises != null)
                {
                    var sessionExercise = Session.SessionExercises.ToArray()[_currentExerciseIndex];
                    if (sessionExercise?.Sets != null)
                    {
                        foreach (var set in sessionExercise.Sets.Select((value, i) => new { i, value }))
                        {
                            <div class="row justify-content-center my-2">
                                <div class="col-10 text-center p-2 @(set.value.IsComplete || set.value.IsSkipped ? "card3" : "card")">
                                    <h5>
                                        @if (set.value.IsComplete)
                                        {
                                            @($"{set.value.Load?.ToString(set.value.Load % 1 == 0 ? "0" : "0.0")} x {set.value.Reps} @ {set.value.Rpe} RPE")
                                       }
                                        else if (set.value.IsSkipped)
                                        {
                                            @("Skipped")
                                        }
                                        else
                                        {
                                            @($"Set {set.i + 1}")
                                        }
                                    </h5>
                                </div>
                            </div>
                        }
                    }
                    <div class="text-center my-3">
                        <button class="btn-outline-light btn rounded-pill px-2 mx-2" @onclick="PreviousExercise" disabled="@(_currentExerciseIndex <= 0)">← Prev</button>
                        <button class="btn-outline-light btn rounded-pill px-2 mx-2" @onclick="NextExercise" disabled="@(_currentExerciseIndex >= Session.SessionExercises.Count() - 1)">Next →</button>
                        @if (sessionExercise.Sets.Any(x => !x.IsComplete && !x.IsSkipped))
                        {
                            <button class="btn-outline-light btn rounded-pill px-2 mx-2" @onclick="StartSet">Start Next Set</button>
                        }
                        <button class="btn-outline-light btn rounded-pill px-2 mx-2" @onclick="() => OnSkipClick(sessionExercise.Id)">Skip</button>
                        <button class="btn-outline-light btn rounded-pill px-2 mx-2" @onclick="() => OnSwapExerciseClick(sessionExercise.Id)">Swap Exercise</button>
                        @if (Session.SessionExercises.All(x => x.Sets.All(s => s.IsComplete || s.IsSkipped)))
                        {
                            <button class="btn-outline-light btn rounded-pill px-2 mx-2" @onclick="FinishSession">Finish Session</button>
                        }
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string? SessionId { get; set; }
    public Session? Session { get; set; }
    private int _currentExerciseIndex = 0;

    protected override void OnInitialized()
    {
        using var context = new LiftTrackerContextBuilder(Configuration).Build();
        if (SessionId != null)
        {
            Session = context.Sessions?.Include(x => x.SessionExercises).ThenInclude(x => x.Sets).SingleOrDefault(x => x.Id.ToString() == SessionId);
        }
        else
        {
            Session = context.Sessions?.Include(x => x.SessionExercises).ThenInclude(x => x.Sets).FirstOrDefault(x => !x.IsComplete);
        }

        if (Session?.SessionExercises != null)
        {
            _currentExerciseIndex = Session.SessionExercises.ToList().FindIndex(x => x.Sets.Any(s => !s.IsComplete && !s.IsSkipped));
            if (_currentExerciseIndex == -1) _currentExerciseIndex = 0;  // Default to zero if all exercises are complete
        }
    }

    private void PreviousExercise()
    {
        if (_currentExerciseIndex > 0)
        {
            _currentExerciseIndex--;
        }
    }

    private void NextExercise()
    {
        if (_currentExerciseIndex < Session.SessionExercises.Count() - 1)
        {
            _currentExerciseIndex++;
        }
    }

    private void StartSet()
    {
        NavigationManager.NavigateTo("/TrackSet");
    }

    private void FinishSession()
    {
        using var context = new LiftTrackerContextBuilder(Configuration).Build();
        if (Session != null)
        {
            Session.IsComplete = true;
            context.SaveChanges();
            NavigationManager.NavigateTo("/");
        }
    }

    private void OnSetClick(int setId)
    {
        NavigationManager.NavigateTo($"/TrackSet/{setId}");
    }

    private void OnSkipClick(int sessionExerciseId)
    {
        using var context = new LiftTrackerContextBuilder(Configuration).Build();
        var record = context.SessionExercises.Include(x => x.Sets).FirstOrDefault(x => x.Id == sessionExerciseId);
        if (record != null && record.Sets != null)
        {
            foreach (var set in record.Sets)
            {
                set.IsSkipped = true;
            }
            context.SaveChanges();
            NavigationManager.NavigateTo($"/TrackWorkout/{SessionId}", true);
        }
    }

    private void OnSwapExerciseClick(int sessionExerciseId)
    {
        NavigationManager.NavigateTo($"/SwapExercise/{sessionExerciseId}");
    }
}
